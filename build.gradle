plugins {
    id 'base'
    id 'de.dfki.mary.voicebuilding.marytts-kaldi-mfa'
    id 'org.m2ci.msp.flaml'
}

group 'de.dfki.mary'
version '0.1.0-SNAPSHOT'

repositories {
    mavenLocal()

    exclusiveContent {
        forRepository {
            ivy {
                url 'https://digital.serbski-institut.de/marytts'
                patternLayout {
                    artifact '[module].[ext]'
                }
                metadataSources {
                    artifact()
                }
            }
        }
        filter {
            includeGroup 'de.serbski-institut'
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                url 'https://oss.sonatype.org/content/repositories/snapshots'
            }
        }
        filter {
            includeModule 'de.dfki.mary', 'marytts-lang-dsb'
        }
    }
}

configurations {
    data
}

dependencies {
    data group: 'de.serbski-institut', name: 'dsb_audio_data', version: '2022.10.05', ext: 'zip'
    marytts group: 'de.dfki.mary', name: 'marytts-lang-dsb', version: '0.1.0-SNAPSHOT'
    marytts group: 'de.dfki.mary', name: 'marytts-lexicon-dsb', version: '0.1.0'
}

def unpackDataTask = tasks.register('unpackData') {
    ext.textDir = objects.directoryProperty()
            .convention(layout.buildDirectory.dir('text'))
    ext.wavDir = objects.directoryProperty()
            .convention(layout.buildDirectory.dir('wav'))
    outputs.dir textDir
    outputs.dir wavDir

    doLast {
        copy {
            into temporaryDir
            from configurations.data
            filesMatching '*.zip', { zipDetails ->
                copy {
                    into textDir
                    from zipTree(zipDetails.file)
                    include 'text/*.txt'
                    eachFile { it.path = it.name }
                    includeEmptyDirs = false
                }
                copy {
                    into wavDir
                    from zipTree(zipDetails.file)
                    include 'wav/*.wav'
                    eachFile { it.path = it.name }
                    includeEmptyDirs = false
                }
            }
        }
    }
}

convertTextToMaryXml {
    locale = Locale.forLanguageTag('dsb')
    srcDir = unpackDataTask.get().textDir
}

prepareForcedAlignment {
    wavDir = unpackDataTask.get().wavDir
}
